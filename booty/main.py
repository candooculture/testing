import os
import requests
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
from operational_risk import router as risk_router, run_operational_risk, RiskInput

load_dotenv()

app = FastAPI()

# CORS settings
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.include_router(risk_router)

def render_report_html(data):
    return f"""
    <!DOCTYPE html>
    <html>
    <head><meta charset="UTF-8"><title>ORS Report</title></head>
    <body style='font-family: Arial, sans-serif; max-width: 640px; margin: 0 auto; padding: 20px; color: #333;'>
      <h2 style='text-align: center;'>üìä Operational Risk Summary</h2>
      <p style='text-align: center; color: #555;'>Based on your current operations and financial inputs.</p>
      <hr style='margin: 20px 0; border: none; border-top: 1px solid #eee;' />

      <h3>üí∏ Profit at Risk</h3>
      <ul>
        <li><strong>Total Profit at Risk:</strong> ${data.get("total_risk_dollars", "N/A")}</li>
        <li><strong>EBITDA Margin:</strong> {data.get("ebitda_margin", "N/A")}%</li>
        <li><strong>EBITDA Value:</strong> ${data.get("ebitda_value", "N/A")}</li>
        <li><strong>% EBITDA at Risk:</strong> {data.get("ebitda_risk_pct", "N/A")}%</li>
      </ul>

      <h3>üßæ Risk Breakdown by Module</h3>
      <ul>
        {"".join([f"<li><strong>{k}:</strong> ${v}</li>" for k, v in data.get("module_breakdown", {}).items()])}
      </ul>

      <h3>üì£ Summary</h3>
      <p>{data.get("summary", "No summary available.")}</p>

      <p style='margin-top: 30px; font-size: 14px; color: #777;'>Generated by the Candoo Culture ORS Engine.</p>
    </body>
    </html>
    """

@app.post("/send-risk-report")
async def send_risk_report(request: Request):
    try:
        raw = await request.json()
        print("üì® Sending Risk Report:", raw)

        recipient = raw.get("recipient")
        subject = raw.get("subject")

        # Parse and run ORS
        risk_input = RiskInput(**raw)
        ors_result = run_operational_risk(risk_input)

        mg_api_key = os.getenv("MAILGUN_API_KEY")
        mg_domain = os.getenv("MAILGUN_DOMAIN")
        mg_sender = os.getenv("MAILGUN_SENDER")

        if not all([mg_api_key, mg_domain, mg_sender]):
            raise Exception("Missing one or more Mailgun environment variables.")

        response = requests.post(
            f"https://api.mailgun.net/v3/{mg_domain}/messages",
            auth=("api", mg_api_key),
            data={
                "from": f"Candoo Culture Reports <{mg_sender}>",
                "to": [recipient],
                "subject": subject,
                "html": render_report_html(ors_result)
            }
        )

        if response.status_code != 200:
            raise Exception(f"Mailgun Error: {response.text}")

        return {"success": True, "message": "Report sent."}

    except Exception as e:
        print("‚ùå Report Sending Failed:", str(e))
        raise HTTPException(status_code=500, detail=str(e))
